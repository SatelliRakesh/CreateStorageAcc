# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  - name: storageAccountName
    value: rakeshggk1
  - name: resourceGroupName
    value: StorageResGrp
  - name: SubscriptionName
    value: Visual Studio Enterprise Subscription – MPN(d2413346-1d72-4ae7-8969-64fbdf906cf8)
  - name: StorageAccount
    value: rakeshggk1
  - name: TableStorage
    value: superUser
  - name: UserDetails
    value: '[{"UserId": "1","Name": "rakesh"}, {"UserId": "2", "Name": "ragav"}]'
  - name: SubscriptionId
    value: d2413346-1d72-4ae7-8969-64fbdf906cf8
pool:
  vmImage: 'windows-latest'

steps:

- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    #azureResourceManagerConnection: 'Visual Studio Enterprise Subscription – MPN(d2413346-1d72-4ae7-8969-64fbdf906cf8)'
    azureResourceManagerConnection: $(SubscriptionName)
    #subscriptionId: 'd2413346-1d72-4ae7-8969-64fbdf906cf8'
    subscriptionId: $(SubscriptionId)
    action: 'Create Or Update Resource Group'
    #resourceGroupName: 'StorageResGrp'
    resourceGroupName: $(resourceGroupName)
    location: 'East US'
    templateLocation: 'Linked artifact'
    csmFile: './storageacct.json'
    csmParametersFile: './parameter.json'
    deploymentMode: 'Incremental'

- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'Visual Studio Enterprise Subscription – MPN(d2413346-1d72-4ae7-8969-64fbdf906cf8)'
    ScriptType: 'InlineScript'
    Inline: |
      # You can write your azure powershell scripts inline here. 
      # You can also pass predefined and custom variables to this script using arguments
      
      $storageAccount = Get-AzStorageAccount -ResourceGroupName $(resourceGroupName) -Name $(StorageAccount)
      $saContext = $storageAccount.Context
      #$saContext = (Get-AzureRmStorageAccount -ResourceGroupName StorageResGrp -Name rakeshggk1).Context 
      
      $cloudTable = (Get-AzStorageTable –Name $(TableStorage) –Context $saContext -ErrorVariable isTableNotAvailable -ErrorAction SilentlyContinue).CloudTable
      if($isTableNotAvailable){
      New-AzStorageTable –Name $(TableStorage) –Context $saContext
      }
      Install-Module -Name AzTable -Force
      
      #$jsonobj = ConvertFrom-Json -InputObject '[{"UserId": "1","Name": "rakesh"}, {"UserId": "2", "Name": "ragav"}]'
      $jsonobj = ConvertFrom-Json -InputObject '$(UserDetails)'
      $jsonobj
      ForEach($Row in $jsonobj){
      $partitionKey = "$($Row.UserId)" 
      $rowkey = "$($Row.UserId)"  
      $hash_table_property = @{}
      $Row.psobject.properties | Foreach { $hash_table_property[$_.Name] = $_.Value }
      #Add-AzTableRow -table $cloudTable -partitionKey $partitionKey -rowKey $rowkey -property  $hash_table_property -ErrorVariable isConflict -ErrorAction SilentlyContinue
      #if(isConflict){
      #Write-Error "Conflict raised as there is an entry in table storage with partition key $($partitionKey) and row key $($rowKey)"
      #}
      }
    azurePowerShellVersion: 'LatestVersion'

